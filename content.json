{"meta":{"title":"虾米吃大鱼","subtitle":null,"description":null,"author":"ypc1202","url":"http://yoursite.com"},"pages":[],"posts":[{"title":"面向对象","slug":"面向对象","date":"2018-06-12T13:07:56.000Z","updated":"2018-06-13T01:08:51.893Z","comments":true,"path":"2018/06/12/面向对象/","link":"","permalink":"http://yoursite.com/2018/06/12/面向对象/","excerpt":"","text":"面向对象 类 : 用来描述具有相同的属性和方法的对象集合.它定义了该集合中每个对象那个所共有的属性和方法 方法 : 类中定义的函数. 类变量 : 类变量在整个实例化的对象中是公用的. 数据成员 : 类变量或者实例. 方法重写 : 如果从父类继承的方法不能满足子类的需求,可以对其改写,这个方法叫做覆盖(override),也称为方法的重写. 类变量实例 : 定义在方法中的变量,只作用于当前的实例的类. 继承 : 即一个派生类derived class 继承 基类 base class 的字段和方法.继承也允许把一个派生类作为一个基类对象对待. 实例化 : 创建一个类的实例. 对象 : 对象是一个类的实例. 类对象 123456789101112131415161718class Myclass: i = 1234 def f(self): return \"hello world\"#类实例化x = Myclass()#访问类的属性和方法print(\"Myclass类的属性 i \" ,x.i)print(\"Myclass类的方法 f \" ,x.f())#运行结果#Myclass类的属性 i 1234#Myclass类的方法 f hello world init 很多类都倾向于将对象创建为有初始状态的。因此类可能会定义一个名为 init() 的特殊方法(构造方法). 类定义了 init() 方法的话，类的实例化操作会自动调用 init() 方法 . init() 方法可以有参数，参数通过 init() 传递到类的实例化操作上 . 1234567891011class Complex: def __init__(self,a,b): self.a = a self.b = bx = Complex(1,2)print(x.a)print(x.b)#运行结果#1#2 self代表类的实例，而非类 12345678910class Test: def prt(self): print(self) print(self.__class__)t = Test() #实例化t.prt()#运行结果#&lt;__main__.Test object at 0x029972F0&gt;#&lt;class '__main__.Test'&gt; 代码中的self其实是可以替换的,只不过大家约定俗成都这样写.同样类的名称首字母也是大写的.","categories":[],"tags":[]},{"title":"桃花源记-中文测试","slug":"桃花源记","date":"2018-06-12T07:00:42.000Z","updated":"2018-06-12T10:08:06.744Z","comments":true,"path":"2018/06/12/桃花源记/","link":"","permalink":"http://yoursite.com/2018/06/12/桃花源记/","excerpt":"","text":"晋太元中，武陵人捕鱼为业。缘溪行，忘路之远近。忽逢桃花林，夹岸数百步，中无杂树，芳草鲜美，落英缤纷，渔人甚异之，复前行，欲穷其林。 林尽水源，便得一山，山有小口，仿佛若有光。便舍船，从口入。初极狭，才通人。复行数十步，豁然开朗。土地平旷，屋舍俨然，有良田美池桑竹之属。阡陌交通，鸡犬相闻。其中往来种作，男女衣着，悉如外人。黄发垂髫，并怡然自乐。 见渔人，乃大惊，问所从来。具答之。便要还家，设酒杀鸡作食。村中闻有此人，咸来问讯。自云先世避秦时乱，率妻子邑人来此绝境，不复出焉，遂与外人间隔。问今是何世，乃不知有汉，无论魏晋。此人一一为具言所闻，皆叹惋。余人各复延至其家，皆出酒食。停数日，辞去。此中人语云：“不足为外人道也。” 既出，得其船，便扶向路，处处志之。及郡下，诣太守，说如此。太守即遣人随其往，寻向所志，遂迷，不复得路。 南阳刘子骥，高尚士也，闻之，欣然规往。未果，寻病终，后遂无问津者。","categories":[],"tags":[]},{"title":"Hello World","slug":"hello-world","date":"2018-06-11T06:38:47.291Z","updated":"2018-06-11T06:38:47.291Z","comments":true,"path":"2018/06/11/hello-world/","link":"","permalink":"http://yoursite.com/2018/06/11/hello-world/","excerpt":"","text":"Welcome to Hexo! This is your very first post. Check documentation for more info. If you get any problems when using Hexo, you can find the answer in troubleshooting or you can ask me on GitHub. Quick StartCreate a new post1$ hexo new \"My New Post\" More info: Writing Run server1$ hexo server More info: Server Generate static files1$ hexo generate More info: Generating Deploy to remote sites1$ hexo deploy More info: Deployment","categories":[],"tags":[]}]}